#!/bin/bash
function _boost() {
  cd /tmp
  wget -O boost_1_65_1.tar.gz -q https://sourceforge.net/projects/boost/files/boost/1.65.1/boost_1_65_1.tar.gz/download
  tar -zxvf boost_1_65_1.tar.gz >>"${OUTTO}" 2>&1
  cd boost_1_65_1
  ./bootstrap.sh --prefix=/usr/ --with-libraries=system --with-libraries=python --with-libraries=chrono --with-libraries=random >>"${OUTTO}" 2>&1;
  ./b2 >>"${OUTTO}" 2>&1;
  ./b2 install >>"${OUTTO}" 2>&1;
  cd /tmp
  rm -rf boost_1_65_1.tar.gz boost_1_65_1
  cd
}

function _qbittorrent() {
  apt-get -qy update >>"${OUTTO}" 2>&1;
  LIST='build-essential git checkinstall pkg-config libgl1-mesa-dev libjpeg-dev libpng-dev automake libtool libgeoip-dev python3-dev python3-pip'
  for depend in $LIST; do
    apt-get -qq -y install $depend >>"${OUTTO}" 2>&1;
  done
  if [ ! -e /usr/lib/libboost_system.so ]; then
    _boost
  fi
  cd ${local_packages}
  if [ ! -e /usr/local/lib/libtorrent-rasterbar.so ]; then
    LTRC=RC_1_0
    git clone -b ${LTRC} https://github.com/arvidn/libtorrent.git >>"${OUTTO}" 2>&1;
    cd libtorrent
	cp ${local_setup}sources/libtorrent-rasterbar-${LTRC}.patch .
    patch -p1 < libtorrent-rasterbar-${LTRC}.patch >>"${OUTTO}" 2>&1
    ./autotool.sh >>"${OUTTO}" 2>&1;
    ./configure --enable-python-binding --disable-debug --enable-encryption --with-libgeoip=system --with-libiconv CXXFLAGS=-std=c++11 --with-boost-libdir=/usr/lib >>"${OUTTO}" 2>&1;
    make -j$(nproc) >>"${OUTTO}" 2>&1;
    checkinstall -y --pkgversion=1.0.11 >>"${OUTTO}" 2>&1;
  fi
  ldconfig >>"${OUTTO}" 2>&1;
  apt-get -qy update >>"${OUTTO}" 2>&1;
  LIST='qtbase5-dev qttools5-dev-tools libqt5svg5-dev'
  for depend in $LIST; do
  	apt-get -qq -y install $depend >>"${OUTTO}" 2>&1;
  done
  cd ${local_packages}
  git clone -b v4_0_x https://github.com/qbittorrent/qBittorrent >>"${OUTTO}" 2>&1;
  cd qBittorrent
  qbversion=`cat configure | grep -Eo "PACKAGE_VERSION=.*" | grep -Eo "[0-9.]+"`
  ./configure --disable-gui --with-boost-libdir=/usr/lib >>"${OUTTO}" 2>&1;
  make -j$(nproc) >>"${OUTTO}" 2>&1;
  checkinstall -y --pkgversion=${qbversion} >>"${OUTTO}" 2>&1;
  export LD_LIBRARY_PATH=/usr/local/lib:${LD_LIBRARY_PATH}
  cp ${local_setup}templates/sysd/qbittorrent.template  /etc/systemd/system/qbittorrent@.service >/dev/null 2>&1
  systemctl enable qbittorrent@${username} >/dev/null 2>&1
  systemctl start qbittorrent@${username} >/dev/null 2>&1
  sleep 10
  systemctl stop {qbittorrent}@${username} >/dev/null 2>&1
  cp -f ${local_setup}templates/qBittorrent.conf.template /home/${username}/.config/qBittorrent/qBittorrent.conf
  sed -i "s/admin/${username}/g" /home/${username}/.config/qBittorrent/qBittorrent.conf
  sed -i "s/5ebe2294ecd0e0f08eab7690d2a6ee69/${ha1pass}/g" /home/${username}/.config/qBittorrent/qBittorrent.conf
  sed -i "s/mySavePath/\/home\/${username}\/torrents\/qbittorrent/g" /home/${username}/.config/qBittorrent/qBittorrent.conf
  chmod -R 755 /home/${username}/.config/
  chown -R ${username}.${username} /home/${username}/.config/
  mkdir -p /home/${username}/torrents/qbittorrent
  chown ${username}: /home/${username}/torrents/qbittorrent
  cd /srv/rutorrent/home
  ln -s /home/${username}/torrents/qbittorrent/ ${username}.qbittorrent.downloads
  cd ${local_packages}
  rm -r qBittorrent
}

function _insqBApache() {
APPNAME='qbittorrent'
APPDPORT='8086'
  cat > /etc/apache2/sites-enabled/qbittorrent.conf <<EOF
<Location /$APPNAME>
ProxyPass http://localhost:$APPDPORT
ProxyPassReverse http://localhost:$APPDPORT
Require all granted
</Location>
EOF

  touch /install/.qbittorrent.lock
  chown www-data: /etc/apache2/sites-enabled/qbittorrent.conf
  
  service apache2 reload
}

function _insqBComplete() {
  echo "qBittorrent Install Complete!" >>"${OUTTO}" 2>&1;
  sleep 5
  echo >>"${OUTTO}" 2>&1;
  echo >>"${OUTTO}" 2>&1;
  echo "Close this dialog box to refresh your browser" >>"${OUTTO}" 2>&1;
}
function _insqBExit() {
  exit
}


username=$(cat /srv/rutorrent/home/db/master.txt)
passwd=$(cat /root/${username}.info | cut -d ":" -f 3 | cut -d "@" -f 1)
ha1pass=`echo -n "${passwd}"|md5sum |cut -f1 -d' '`
OUTTO="/srv/rutorrent/home/db/output.log"
local_setup=/etc/QuickBox/setup/
local_dashboard=/etc/QuickBox/dashboard/

echo "Configuring qBittorrent ... " >> ${OUTTO} 2>&1
echo -en "\rConfiguring qBittorrent ... ";_qbittorrent
echo "Setting up qBittorrent Reverse Proxy and Reloading Apache2 ... " >> ${OUTTO} 2>&1
echo -en "\rSetting up qBittorrent Reverse Proxy and Reloading Apache2 ... ";_insqBApache
sleep 5
echo >>"${OUTTO}" 2>&1;
echo >>"${OUTTO}" 2>&1;
_insqBComplete
_insqBExit

echo ""
